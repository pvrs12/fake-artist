{"version":3,"sources":["components/Setup.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","card","margin","padding","colorPicker","display","flexWrap","marginRight","height","icon","float","gridContainer","flexGrow","link","button","width","NewPlayerCard","setPlayer","classes","defaultPlayer","React","useState","playerName","setPlayerName","playerColor","setPlayerColor","Card","className","style","onSubmit","event","preventDefault","name","color","CardContent","TextField","label","value","onInput","e","target","ColorPicker","onColorChoice","PlayerCard","player","setPlayerColor_","expanded","setExpanded","handleSubmit","defaultValue","onBlur","IconButton","onClick","Collapse","in","timeout","unmountOnExit","map","index","Button","colorBlock","OtherOptions","gameState","setGameState","randomChoice","array","Math","floor","random","length","categoryChoice","setCategoryChoice","numFakers","setNumFakers","categories","gameWords","numFakerOptions","Array","max","players","keys","i","push","FormControl","variant","InputLabel","htmlFor","Select","onChange","category","option","to","word","list","filter","getCategoryAndWord","fakerIndices","numPlayers","min","includes","getFakerIndices","Setup","newGameState","setNewGameState","setGameStateWithReRender","newGameStateCopy","newPlayer","splice","Infinity","Container","maxWidth","Typography","gutterBottom","App","exact","path","Play","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1810b68f.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport ExpandMoreIcon from '@material-ui/icons/Edit';\nimport Delete from '@material-ui/icons/Delete';\nimport gameWords from '../data/words.json'\nimport { Link } from 'react-router-dom'\n\nconst useStyles = makeStyles({\n\tcard: {\n\t\tmargin: 10,\n\t\tpadding: 5\n\t},\n\tcolorPicker: {\n\t\tdisplay: 'flex',\n\t\tflexWrap: 'wrap',\n\t\t'& > *': {\n\t\t\tmargin: 1,\n\t\t\tmarginRight: 5,\n\t\t\theight: 30\n\t\t}\n\t},\n\ticon: {\n\t\tfloat: 'right'\n\t},\n\tgridContainer: {\n\t\tdisplay: 'flex',\n\t\t'& > *': {\n\t\t\tflexGrow: 1,\n\t\t\tmargin: 10\n\t\t}\n\t},\n\tlink: {\n\t\tpadding: 8,\n\t\tdisplay: 'flex'\n\t},\n\tbutton: {\n\t\twidth: '100%',\n\t\theight: '100%',\n\t}\n});\nfunction NewPlayerCard({ setPlayer }) {\n\tconst classes = useStyles();\n\n\tconst defaultPlayer = { name: '', color: '#eee' }\n\n\tconst [playerName, setPlayerName] = React.useState(defaultPlayer.name)\n\tconst [playerColor, setPlayerColor] = React.useState(defaultPlayer.color)\n\n\tfunction handleSubmit(event) {\n\t\tevent.preventDefault()\n\t\tsetPlayer({ name: playerName, color: playerColor })\n\t\tsetPlayerName(defaultPlayer.name)\n\t\tsetPlayerColor(defaultPlayer.color)\n\n\t}\n\n\tfunction handleSubmitColorPicker(color) {\n\t\tsetPlayer({ name: playerName, color: color })\n\t\tsetPlayerName(defaultPlayer.name)\n\t\tsetPlayerColor(defaultPlayer.color)\n\t}\n\n\treturn (\n\t\t<Card className={classes.card} style={{ 'backgroundColor': playerColor }}>\n\t\t\t<form onSubmit={handleSubmit} >\n\t\t\t\t<CardContent>\n\t\t\t\t\t<TextField label=\"New player name\" value={playerName} onInput={e => setPlayerName(e.target.value)} />\n\t\t\t\t</CardContent>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<ColorPicker onColorChoice={handleSubmitColorPicker} />\n\t\t\t\t</CardContent>\n\t\t\t</form>\n\n\n\t\t</Card >\n\t);\n\n}\n\nfunction PlayerCard({ player, setPlayer }) {\n\tconst classes = useStyles();\n\n\tconst [playerColor, setPlayerColor_] = React.useState(player.color)\n\tfunction setPlayerColor(color) {\n\t\tsetPlayerColor_(color) // Change the background of the card\n\t\tsetPlayer({ ...player, color: color }) // Actually change the data in the app\n\t}\n\n\tconst [playerName, setPlayerName] = React.useState(player.name)\n\n\tconst [expanded, setExpanded] = React.useState(false) // Not expanded by default\n\tconst handleExpandClick = () => { setExpanded(!expanded) }\n\n\tfunction handleSubmit(event) {\n\t\tevent.preventDefault()\n\t\tsetPlayer({ name: playerName, color: playerColor })\n\t}\n\n\treturn (\n\t\t<Card className={classes.card} style={{ 'backgroundColor': playerColor }}>\n\t\t\t<CardContent>\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tdefaultValue={player.name}\n\t\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\t\tonInput={e => setPlayerName(e.target.value)}\n\t\t\t\t\t\tonBlur={handleSubmit} />\n\n\t\t\t\t\t<IconButton onClick={() => setPlayer(null)} className={classes.icon}><Delete /></IconButton>\n\t\t\t\t\t<IconButton onClick={handleExpandClick} className={classes.icon}><ExpandMoreIcon /></IconButton>\n\n\t\t\t\t</form>\n\t\t\t</CardContent>\n\n\n\n\t\t\t<Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<ColorPicker onColorChoice={setPlayerColor} />\n\t\t\t\t</CardContent>\n\t\t\t</Collapse>\n\t\t</Card >\n\t);\n}\n\nfunction ColorPicker({ onColorChoice }) {\n\tconst classes = useStyles();\n\n\tconst colors = [\"#AC6D5E\", \"#F79C8F\", \"#ED5842\", \"#F7AA64\", \"#FFD28A\", \"#BDC586\", \"#687C6F\", \"#56AFAC\", \"#365A79\", \"#74688E\", \"#B0B0B0\"]\n\n\treturn (\n\t\t<div className={classes.colorPicker}>\n\t\t\t{colors.map((color, index) =>\n\t\t\t\t<Button\n\t\t\t\t\tclassName={classes.colorBlock}\n\t\t\t\t\tstyle={{ 'backgroundColor': color }}\n\t\t\t\t\tonClick={() => onColorChoice(color)}\n\t\t\t\t\tkey={index} />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n\nfunction OtherOptions({ gameState, setGameState }) {\n\n\tconst classes = useStyles();\n\n\tfunction randomChoice(array) { return array[Math.floor(Math.random() * array.length)]; }\n\n\tfunction getCategoryAndWord(categoryChoice) {\n\t\tlet category, word, _\n\t\tif (categoryChoice === 'Random') {\n\t\t\t[category, word] = randomChoice(gameWords.list)\n\t\t}\n\t\telse {\n\t\t\tcategory = categoryChoice;\n\t\t\t[_, word] = randomChoice(gameWords.list.filter(([category, word]) => category === categoryChoice))\n\t\t}\n\t\treturn [category, word]\n\t}\n\n\tfunction getFakerIndices(numFakers) {\n\t\tconst fakerIndices = []\n\t\tconst numPlayers = gameState.players.length\n\n\t\tif (numFakers === 'Random') {\n\t\t\tnumFakers = Math.floor(Math.random() * (numPlayers - 1)) + 1\n\t\t}\n\t\tnumFakers = Math.min(numFakers, numPlayers)\n\n\t\twhile (fakerIndices.length < numFakers) {\n\t\t\tlet index = Math.floor(Math.random() * numPlayers)\n\t\t\tif (!fakerIndices.includes(index)) { fakerIndices.push(index) }\n\t\t}\n\n\t\treturn fakerIndices\n\n\t}\n\n\tconst [categoryChoice, setCategoryChoice] = React.useState('Random')\n\tconst [numFakers, setNumFakers] = React.useState(1)\n\n\tconst categories = ['Random', ...gameWords.categories]\n\n\tconst numFakerOptions = [...Array(Math.max(1, gameState.players.length)).keys()].map(i => i + 1)\n\tnumFakerOptions.push('Random')\n\n\tfunction updateGameState() {\n\t\tconst [category, word] = getCategoryAndWord(categoryChoice)\n\t\tconst fakerIndices = getFakerIndices(numFakers)\n\t\tsetGameState({ ...gameState, category, word, fakerIndices })\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className={classes.gridContainer}>\n\t\t\t\t<FormControl variant=\"outlined\" key={0}>\n\t\t\t\t\t<InputLabel htmlFor=\"outlined-age-native-simple\">Category</InputLabel>\n\t\t\t\t\t<Select label=\"Category\"\n\t\t\t\t\t\tvalue={categoryChoice}\n\t\t\t\t\t\tonChange={e => setCategoryChoice(e.target.value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{categories.map((category, index) => <option value={category} key={index}>{category}</option>)}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\n\t\t\t\t<FormControl variant=\"outlined\" key={1}>\n\t\t\t\t\t<InputLabel htmlFor=\"outlined-age-native-simple\">Number of fakers</InputLabel>\n\t\t\t\t\t<Select label=\"Number of fakers\"\n\t\t\t\t\t\tvalue={numFakers}\n\t\t\t\t\t\tonChange={e => setNumFakers(e.target.value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{numFakerOptions.map((option, index) => <option value={option} key={index}>{option}</option>)}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t</div >\n\t\t\t<Link to=\"/play\" className={classes.link}>\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={updateGameState} className={classes.button}>Start game</Button>\n\t\t\t</Link>\n\t\t</div>\n\t)\n\n}\n\n\n\nfunction Setup({ gameState, setGameState }) {\n\n\tconst [newGameState, setNewGameState] = React.useState(gameState)\n\n\tfunction setGameStateWithReRender(newGameState) {\n\t\tlet newGameStateCopy = { ...newGameState }\n\n\t\tsetNewGameState(newGameStateCopy) // This is essentially just to trigger the re-render of the this component\n\t\tsetGameState(newGameStateCopy) // This actually sets the game state for the App component\n\t}\n\n\tfunction setPlayer(newPlayer, index) {\n\n\t\t// If newPlayer is null, delete that player\n\t\tif (newPlayer == null) {\n\t\t\tnewGameState.players.splice(index, 1)\n\t\t}\n\t\t// If index is Infinity, add a new player\n\t\telse if (index === Infinity) {\n\t\t\tnewGameState.players.push(newPlayer)\n\t\t}\n\t\t// Otherwise replace the player at the given index\n\t\telse {\n\t\t\tnewGameState.players[index] = newPlayer\n\t\t}\n\n\t\tsetGameStateWithReRender(newGameState)\n\t}\n\n\n\treturn (\n\t\t<Container maxWidth=\"md\" >\n\n\t\t\t<Typography variant=\"h5\" gutterBottom>\n\t\t\t\tSetup\n\t\t\t</Typography>\n\n\t\t\t{newGameState.players.map((player, index) =>\n\t\t\t\t< PlayerCard\n\t\t\t\t\tkey={index + player.name + player.color} // Make it as unique as possible so delete isn't buggy\n\t\t\t\t\tplayer={player}\n\t\t\t\t\tsetPlayer={(newPlayer) => setPlayer(newPlayer, index)} />\n\t\t\t)}\n\n\t\t\t<NewPlayerCard setPlayer={(newPlayer) => setPlayer(newPlayer, Infinity)} />\n\n\t\t\t<OtherOptions gameState={newGameState} setGameState={setGameStateWithReRender} />\n\n\t\t</Container>\n\t)\n}\n\nexport default Setup;\n","import React from \"react\";\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink,\n\tRedirect\n} from \"react-router-dom\";\nimport Container from '@material-ui/core/Container';\n\nimport Setup from './components/Setup'\n\nexport default function App() {\n\n\tconst [gameState, setGameState] = React.useState({\n\t\tplayers: [],\n\t\tfakerIndices: [],\n\t\tcategory: '',\n\t\tword: ''\n\t})\n\n\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t<Redirect to=\"/setup\" />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/setup\">\n\t\t\t\t\t<Setup gameState={gameState} setGameState={setGameState} />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/play\">\n\t\t\t\t\t<Play gameState={gameState} />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\n\n\nfunction Play({ gameState }) {\n\treturn (\n\t\t<Container maxWidth=\"md\">\n\t\t\t<h2>This is the game state:</h2>\n\t\t\t<pre>{JSON.stringify(gameState, null, 4)}</pre>\n\n\t\t\t<br />\n\t\t\t<Link to=\"/setup\">Return to setup</Link>\n\t\t</Container>\n\t);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}